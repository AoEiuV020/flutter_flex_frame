# Flutter RSS Reader Project Rules

You are tasked with creating a responsive RSS reader application that demonstrates adaptive layouts across different screen sizes. The project should follow these specific requirements:

## 0. General Rules
- This rules file must be in English
- Code must be in English:
  * Variable names, class names, and function names
  * Code organization (folders, files)
  * Programming keywords and syntax
- Everything else must be in Chinese (zh-CN), including:
  * README.md and all other documentation
  * API documentation
  * Code comments
  * Commit messages
  * Pull request descriptions
  * Issue descriptions
  * Log messages and error descriptions
  * Debug information
  * Test descriptions and documentation
  * User interface text
  * Build and deployment guides
  * Development guidelines
  * Project wiki pages

- Code Modification Rules:
  * Never remove existing functionality during refactoring
  * Do not switch back and forth between known incorrect solutions
  * Once a solution is identified as incorrect, do not revert to it
  * If unable to resolve an issue:
    - Stop making changes immediately
    - Document the problem clearly
    - Explain what solutions were attempted
    - Describe why each attempt failed
    - List any error messages or unexpected behaviors
    - Suggest possible alternative approaches

## 1. Technology Stack & Conventions
- Flutter (latest stable version)
- State Management: MobX
  * Store classes must end with 'Store' suffix
  * Use @observable for state variables
  * Use @computed for derived values
  * Use @action for state modifications
  * Stores must be initialized in di/stores.dart

- Dependency Injection: GetIt
  * Use getter methods for dependency injection
  * No constructor injection unless absolutely necessary
  * Register dependencies in di/dependencies.dart
  * Use lazy singletons by default
  * All Repositories and Stores must be registered and accessed through GetIt

- Routing: go_router
  * Define routes in core/router/routes.dart
  * Use GoRoute for all routes
  * Implement custom transitions
  * Use path parameters for dynamic routing
  * Handle deep linking

- Localization: easy_localization
  * Store translations in assets/translations/
  * Use tr() extension for all text
  * Support zh-CN as primary language
  * Implement fallback to English

## 1.1 Data Persistence
- Database: Drift (SQLite)
  * Use code generation for type-safe database access
  * Define tables in lib/core/database/tables/
  * Define database queries in lib/core/database/daos/
  * Implement migrations in lib/core/database/migrations/
  * Use transactions for related operations
  * Implement proper indexing for performance
  * Handle database versioning

- Data Model Design:
  * Minimize Entity Duplication:
    - Use a single domain model as the primary data representation
    - Only create separate entity classes when absolutely necessary
    - Avoid creating separate models for UI/Network/Database unless there are clear benefits
    
  * Justified Cases for Separate Models:
    - Database Tables: When Drift's type system or constraints require different structure
    - Network DTOs: Only if API format significantly differs from domain model
    - UI Models: Only if view logic requires specific computed properties or transformations
    
  * Model Conversion Strategy:
    - Use extension methods for simple transformations
    - Keep conversion logic close to where it's needed
    - Prefer computed properties over new model classes
    - Cache converted results when performance critical

  * Example Approach:
    ```
    // Primary domain model serves multiple purposes
    class Article {
      final String id;
      final String title;
      final String content;
      final DateTime publishDate;
      final bool isRead;
      
      // UI helpers as computed properties
      String get displayDate => ...;
      bool get isNew => ...;
      
      // Database conversion
      static Article fromRow(ArticleTableData row) => ...;
      ArticleTableCompanion toCompanion() => ...;
      
      // Network conversion
      static Article fromJson(Map<String, dynamic> json) => ...;
      Map<String, dynamic> toJson() => ...;
    }
    ```

- Repository Pattern:
  * Implement all data access logic in lib/repositories/
  * Repositories must be accessed through dependency injection
  * Separate interfaces and implementations
  * All database operations must be asynchronous
  * Implement change notification mechanism
  * Use transactions for atomic operations
  * Handle database errors gracefully
  * Convert between table rows and domain models

- Data Model Requirements:
  * Feed: Basic info, category, unread count, update time
  * Article: Content, author, publish time, read status
  * Category: Name, associated feeds
  * Models must have proper relationships
  * Support bidirectional navigation
  * Use proper foreign key constraints
  * No duplicate entity definitions
  * Clear separation between:
    - Database table definitions (Drift)
    - Domain models (Immutable data classes)
    - Network DTOs (JSON serializable)
    - UI models (if needed for specific view logic)

- Caching Strategy:
  * Cache article content for 7 days by default
  * Unread articles bypass cache expiration
  * Starred articles are stored permanently
  * Implement periodic cache cleanup
  * Support manual cache clearing
  * Enable offline reading support

- Data Synchronization:
  * Periodic background feed sync
  * Support manual force sync
  * Implement incremental sync
  * Handle sync conflicts
  * Track sync history
  * Show sync status

## 2. Project Structure
Follow a feature-first architecture:
```
lib/
  ├── core/          # Core functionality
  │   ├── database/  # Database related code
  │   ├── di/        # Dependency injection
  │   └── router/    # Routing configuration
  ├── features/      # Feature modules
  ├── repositories/  # Data repositories
  ├── stores/        # State management
  ├── models/        # Data models
  └── shared/        # Shared components
```

## 3. Responsive Layout Requirements

1. Mobile Layout (< 600dp):
   * Single page display with navigation
   * Drawer-style feed list
   * Full-screen article list and content
   * Gesture navigation support

2. Tablet Layout (600dp - 1200dp):
   * Two-panel layout
   * Collapsible navigation bar
   * Fixed-width article list
   * Adaptive content area

3. Desktop Layout (> 1200dp):
   * Three-panel simultaneous display
   * Support panel size adjustment
   * Keyboard shortcuts
   * Advanced interaction features

4. Common Requirements:
   * Responsive layout adaptation
   * State preservation and restoration
   * Smooth transitions
   * Offline functionality
   * Accessibility support

## 4. Testing Requirements
1. Unit Tests:
   * Store logic testing
   * Repository testing
   * Utility function testing

2. Widget Tests:
   * Responsive layout testing
   * Navigation flow testing
   * State change testing

3. Integration Tests:
   * Complete feature flow testing
   * Offline functionality testing
   * Performance testing

## 5. Documentation
1. Code Documentation:
   * Public API documentation
   * Example code
   * Complex algorithm explanation

2. README:
   * Environment setup guide
   * Architecture overview
   * Testing instructions
   * Deployment guide 